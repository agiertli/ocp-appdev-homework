#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = version+"-"+currentBuild.number
      // Set the tag for the production image: version
      def prodTag = version

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests"

        // TBD: Execute Maven Build
      }

      // TBD: The next two stages should run in parallel
stage('Paralel stage') {
  parallel (
      // Using Maven run the unit tests
      'unit test': {

        echo "Running Unit Tests"

        sh "${mvnCmd} test"
        
      },

      // Using Maven to call SonarQube for Code Analysis
      'code analysis': {
        echo "Running Code Analysis"

        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"
        
      }
  )

}

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/"

      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

                script {
            openshift.withCluster() {
                openshift.withProject("${GUID}-tasks-dev") {
                    
                openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
                openshift.tag("tasks:latest", "tasks:${devTag}")  
                }
            } 
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
      
        echo "Deploy container image to Development Project"
        script {
             openshift.withCluster() {
                openshift.withProject("${GUID}-tasks-dev") {
                 // 1. Update the image on the dev deployment config
openshift.set("env", "dc/tasks", "VERSION=${devTag}")
openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag}")
     // 2. Update the config maps with the potentially changed properties files
openshift.delete("configmap/tasks-config")
openshift.create("configmap","tasks-config","--from-file=\"application-users.properties=./configuration/application-users.properties\"","--from-file=\"application-roles.properties=./configuration/application-roles.properties\"","-n ${GUID}-tasks-dev")
       
       // 3. Redeploy the dev deployment

openshift.selector("dc", "tasks").rollout().latest();  
       // 4. Wait until the deployment is running
       def dc = openshift.selector("dc", "tasks").object()
       def dc_version = dc.status.latestVersion
       def rc = openshift.selector("rc", "tasks-${dc_version}").object()

       echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
       while (rc.spec.replicas != rc.status.readyReplicas) {
         sleep 5
         rc = openshift.selector("rc", "tasks-${dc_version}").object()
       }
    }
        }
        }
        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=jenkins:\$(oc whoami -t) --dest-creds=admin:redhat docker://docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag}"


        // TBD: Tag the built image with the production tag.
                script {
            
            openshift.withCluster() {
                openshift.withProject("${GUID}-tasks-dev") {
                openshift.tag("tasks:${devTag}", "tasks:${prodTag}")  

                }
            }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding


        script {
            
            openshift.withCluster() {
              openshift.withProject("${GUID}-tasks-prod")  {
                  
      //      1. Determine which application is active  
      
           activeApp = sh(returnStdout: true, script: "oc get route -n ${GUID}-tasks-prod tasks -o jsonpath='{ .spec.to.name }'").trim()

                  if (activeApp == "tasks-blue") {
                     destApp = "tasks-green"
                  } else {
                      destApp = "tasks-blue"
                  }

                      //  2. Update the image for the other application     
    openshift.set("env", "dc/${destApp}", "VERSION=${prodTag}")
    openshift.set("image", "dc/${destApp}", "${destApp}=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag}")
      //      4. Update Config maps for other application

openshift.delete("configmap/${destApp}-config")
openshift.create("configmap","${destApp}-config","--from-file=\"application-users.properties=./configuration/application-users.properties\"","--from-file=\"application-roles.properties=./configuration/application-roles.properties\"")
        // 3. Deploy into the other application
openshift.selector("dc", "${destApp}").rollout().latest();  


       def dc = openshift.selector("dc", "${destApp}").object()
       def dc_version = dc.status.latestVersion
       def rc = openshift.selector("rc", "${destApp}-${dc_version}").object()

       echo "Waiting for ReplicationController ${destApp}-${dc_version} to be ready"
       while (rc.spec.replicas != rc.status.readyReplicas) {
         sleep 5
         rc = openshift.selector("rc", "${destApp}-${dc_version}").object()
       }
              }  
            }
        }


      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
   sh "oc patch -n ${GUID}-tasks-prod route/tasks -p \'{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}\'"
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}